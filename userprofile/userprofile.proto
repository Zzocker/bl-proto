syntax="proto3";

package userprofile;
import "common/common.proto";
import "google/protobuf/wrappers.proto";
option go_package="github.com/Zzocker/bl-proto-go/userprofile";

service UserProfile{


    // Register : will register user to the system
    // input : RegisterRequest object and password in metadata with key "SECRET"
    // output : RegisterResponse
    rpc Register(RegisterRequest)returns(common.EmptyResponse);

    // CheckCred : will check credentials of a user
    // input : CheckCredRequest and password in metadata with key "SECRET"
    // output CheckCredResponse
    rpc CheckCred(CheckCredRequest)returns(common.EmptyResponse);

    // GetUser : return user with given Username
    // input : will get username from the passed JWT inside metadata 
    // output : GetUserResponse
    rpc GetUser(common.EmptyRequest)returns(GetUserResponse);

    // GetContacts : Will return all the contacts of a user only
    // input : will get username from the passed JWT
    // output : GetContactsResponse
    rpc GetContacts(common.EmptyRequest)returns (GetContactsResponse);

    // GetAddresses : returns only Addresses of a user
    // input : will get username from the passed JWT
    // output : GetAddressesResponse
    rpc GetAddresses(common.EmptyRequest)returns(GetAddressesResponse);

    // GetPhotos : returns only Photos of a user
    // input : will get username from the passed JWT
    // output : GetPhotosResponse
    rpc GetPhotos(common.EmptyRequest)returns(GetPhotosResponse);


    // UpdateContacts : updates any fileds from contacts
    // input : Addresses
    // output : UpdateContactsResponse
    rpc UpdateContacts(Contact)returns (GetUserResponse);

    // UpdateAddresses : updates any fileds from Addresses
    // input : Addresses
    // output : UpdateAddressesResponse
    rpc UpdateAddresses(Addresses)returns(GetUserResponse);

    // UpdatePhotos : updates any fileds from Photos
    // input : Photos
    // output : UpdatePhotosResponse
    rpc UpdatePhotos(Photos)returns(GetUserResponse);

    // UpdateUsername : update username of a user
    // input : new username and will get current username from JWT
    rpc UpdateUsername(UpdateUsernameRequest)returns(common.EmptyResponse);

    // UpdatePassword : update password of a user
    // input : new password and will get username from JWT
    rpc UpdatePassword(UpdatePasswordRequest)returns(common.EmptyResponse);

    // DeleteUser : Delete user from system
    // input : will get username from JWT
    rpc DeleteUser(common.EmptyRequest)returns(common.EmptyResponse);
}


// Request message for registerting user
// all field are required
message RegisterRequest{
    string Username=1;
    string Email=2;
    string Phone=3;
    GenderType Gender=4;
    string Name=5;
}

// Request for checking credentials of a user
// username will be passed as message 
// password will be present in metadata with key as "SECRET"
message CheckCredRequest{
    string Username=1;
}
// Response of CheckCred rpc
// if Header.StatusCode = "OK", then cred is correct

message GetUserResponse{
    common.Header Header=1;
    User User=2;
}

message GetContactsResponse{
    common.Header Header=1;
    Contact Contact=2;
}

message GetAddressesResponse{
    common.Header Header=1;
    Addresses Addresses=2;
}

message GetPhotosResponse{
    common.Header Header=1;
    Photos Photos=2;
}

message UpdateUsernameRequest{
    string NewUsername=1;
}

message UpdatePasswordRequest{
    string NewPassword=1;
}

/////////////////////////////////////////////////////////////////////////////////
message User{
    string Username=1;
    string Name=2;
    GenderType Gender=3;
    DateType DOB=4;
    StatusType Status=5;
    Contact Contact=6;
    Addresses Addresses=7;
    Photos Photos=8;
}

enum GenderType{
    UNKNOWN=0;
    FEMALE=1;
    MALE=2;
}

message DateType{
    int32 Date=1;
    int32 Month=2;
    int32 Year=3;
}

message Contact{
    string EmailID=1;
    string Phone=2;
    string Linkedin=3;
    string Twitter=4;
    string Instagram=5;
    string Facebook=6;
}

message Addresses {
    Address Current = 1;
    Address Permanent = 2;
}

message Address {
    string Line=2;
    string District=4;
    string City=3;
    string State=5;
    string PostalCode=6;
}


message Photos {
    Attachment Profile = 1;
    Attachment Cover = 2;
}
message Attachment {
    bytes Data =1;
    string URL = 2;
    string Title =3;
}

enum StatusType{
    NOT_VERIFIED=0;
    VERIFIED=1;
}
